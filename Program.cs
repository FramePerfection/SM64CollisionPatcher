using System;
using System.Runtime.InteropServices;

namespace SM64CollisionPatcher
{
    class Program
    {
        static byte[] find_wall_collisions_from_list_ext_bounds = new byte[]
        {
            0x27, 0xBD, 0xFF, 0x20, 0xAF, 0xBF, 0x00, 0x54, 0xAF, 0xB3, 0x00, 0x50, 0xAF, 0xB2, 0x00, 0x4C, 0xAF, 0xB1, 0x00, 0x48, 0xAF, 0xB0, 0x00, 0x44, 0xF7, 0xBE, 0x00, 0x38, 0xF7, 0xBC, 0x00, 0x30, 0xF7, 0xBA, 0x00, 0x28, 0xF7, 0xB8, 0x00, 0x20, 0xF7, 0xB6, 0x00, 0x18, 0xF7, 0xB4, 0x00, 0x10, 0xC4, 0xAA, 0x00, 0x10, 0x3C, 0x01, 0x3E, 0x80, 0x44, 0x81, 0x00, 0x00, 0xE7, 0xAA, 0x00, 0xD0, 0xC4, 0xA4, 0x00, 0x00, 0x3C, 0x01, 0x43, 0x48, 0x44, 0x81, 0x10, 0x00, 0xE7, 0xA4, 0x00, 0xCC, 0xC4, 0xA6, 0x00, 0x0C, 0xC4, 0xA8, 0x00, 0x04, 0x3C, 0x01, 0x3F, 0x80, 0x00, 0xA0, 0x88, 0x25, 0x46, 0x06, 0x42, 0x80, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xA8, 0x00, 0xD0, 0x00, 0x80, 0x90, 0x25, 0xE7, 0xAA, 0x00, 0xC8, 0xC4, 0xA4, 0x00, 0x08, 0x46, 0x06, 0x42, 0x81, 0xC7, 0xA6, 0x00, 0xCC, 0xE7, 0xA4, 0x00, 0xC4, 0x46, 0x00, 0x41, 0x02, 0xE7, 0xAA, 0x00, 0x7C, 0xC7, 0xA8, 0x00, 0xC8, 0x46, 0x00, 0x32, 0x82, 0x00, 0x00, 0x98, 0x25, 0x46, 0x00, 0x41, 0x82, 0xE7, 0xA4, 0x00, 0xD0, 0x46, 0x04, 0x10, 0x3C, 0xE7, 0xAA, 0x00, 0xCC, 0xC7, 0xAA, 0x00, 0xC4, 0xE7, 0xA6, 0x00, 0xC8, 0x46, 0x00, 0x52, 0x02, 0xC7, 0xA6, 0x00, 0x7C, 0x46, 0x00, 0x32, 0x82, 0xE7, 0xA8, 0x00, 0xC4, 0x45, 0x00, 0x00, 0x02, 0xE7, 0xAA, 0x00, 0x7C, 0xE7, 0xA2, 0x00, 0xD0, 0x52, 0x40, 0x01, 0xE7, 0x3C, 0x01, 0x40, 0x80, 0x8E, 0x50, 0x00, 0x04, 0xC7, 0xA8, 0x00, 0xC8, 0x8E, 0x52, 0x00, 0x00, 0x86, 0x0E, 0x00, 0x06, 0x44, 0x8E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x32, 0xA0, 0x46, 0x0A, 0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x86, 0x0F, 0x00, 0x08, 0x44, 0x8F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x21, 0xA0, 0x46, 0x08, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xD1, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x0A, 0x00, 0x1C, 0xC7, 0xA8, 0x00, 0xCC, 0xE7, 0xAA, 0x00, 0x6C, 0xC7, 0xA6, 0x00, 0x6C, 0xC6, 0x04, 0x00, 0x24, 0x46, 0x08, 0x32, 0x82, 0xE7, 0xA4, 0x00, 0x68, 0xC6, 0x04, 0x00, 0x20, 0xC7, 0xA6, 0x00, 0xC8, 0x46, 0x06, 0x22, 0x02, 0xC7, 0xA6, 0x00, 0x68, 0x46, 0x08, 0x51, 0x00, 0xC7, 0xAA, 0x00, 0xC4, 0x46, 0x0A, 0x32, 0x02, 0xC6, 0x0A, 0x00, 0x28, 0x46, 0x08, 0x21, 0x80, 0xC7, 0xA4, 0x00, 0xD0, 0x46, 0x0A, 0x36, 0x80, 0x44, 0x80, 0x40, 0x00, 0x46, 0x1A, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xD0, 0x3C, 0x3C, 0x18, 0x80, 0x36, 0x45, 0x01, 0x01, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x87, 0x18, 0x11, 0x80, 0x50, 0x18, 0x00, 0x08, 0x86, 0x02, 0x00, 0x00, 0x82, 0x19, 0x00, 0x04, 0x33, 0x28, 0x00, 0x02, 0x53, 0x20, 0x00, 0x1C, 0x86, 0x04, 0x00, 0x0E, 0x10, 0x00, 0x01, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x24, 0x01, 0x00, 0x72, 0x10, 0x41, 0x01, 0xA9, 0x24, 0x01, 0x00, 0x7B, 0x14, 0x41, 0x00, 0x13, 0x3C, 0x02, 0x80, 0x36, 0x8C, 0x42, 0x11, 0x60, 0x10, 0x40, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x84, 0x49, 0x00, 0x74, 0x31, 0x2A, 0x00, 0x40, 0x15, 0x40, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x0A, 0x3C, 0x0B, 0x80, 0x36, 0x8D, 0x6B, 0x11, 0x58, 0x3C, 0x0C, 0x80, 0x33, 0x55, 0x62, 0x00, 0x07, 0x86, 0x04, 0x00, 0x0E, 0x8D, 0x8C, 0xD9, 0x3C, 0x8D, 0x8D, 0x00, 0x04, 0x31, 0xAE, 0x00, 0x02, 0x15, 0xC0, 0x01, 0x95, 0x00, 0x00, 0x00, 0x00, 0x86, 0x04, 0x00, 0x0E, 0x86, 0x09, 0x00, 0x14, 0x86, 0x02, 0x00, 0x0A, 0x86, 0x0F, 0x00, 0x10, 0x01, 0x24, 0x50, 0x23, 0x44, 0x8A, 0x40, 0x00, 0x86, 0x03, 0x00, 0x0C, 0x86, 0x19, 0x00, 0x12, 0x46, 0x80, 0x41, 0x20, 0x01, 0xE2, 0xC0, 0x23, 0x44, 0x98, 0x30, 0x00, 0x03, 0x23, 0x40, 0x23, 0x44, 0x88, 0x50, 0x00, 0x46, 0x80, 0x37, 0xA0, 0xE7, 0xA4, 0x00, 0xB8, 0x86, 0x0B, 0x00, 0x16, 0x3C, 0x01, 0x3F, 0x80, 0x01, 0x62, 0x60, 0x23, 0x44, 0x8C, 0x30, 0x00, 0x46, 0x80, 0x56, 0x20, 0x46, 0x80, 0x32, 0xA0, 0xE7, 0xAA, 0x00, 0xB4, 0x86, 0x0D, 0x00, 0x18, 0x86, 0x0F, 0x00, 0x1A, 0xE7, 0xA4, 0x00, 0x58, 0x01, 0xA3, 0x70, 0x23, 0x44, 0x8E, 0x40, 0x00, 0x01, 0xE4, 0xC0, 0x23, 0x44, 0x98, 0x30, 0x00, 0x46, 0x80, 0x47, 0x20, 0x44, 0x82, 0x20, 0x00, 0xE7, 0xAA, 0x00, 0x5C, 0x44, 0x83, 0x50, 0x00, 0x46, 0x80, 0x32, 0x20, 0xC7, 0xA6, 0x00, 0xCC, 0x46, 0x80, 0x21, 0x20, 0xE7, 0xA8, 0x00, 0xAC, 0xE7, 0xA8, 0x00, 0x60, 0x44, 0x84, 0x40, 0x00, 0x46, 0x80, 0x52, 0xA0, 0x46, 0x04, 0x31, 0x81, 0xC7, 0xA4, 0x00, 0xC8, 0x46, 0x80, 0x42, 0x20, 0xE7, 0xA6, 0x00, 0xA8, 0xE7, 0xA6, 0x00, 0x64, 0x46, 0x0A, 0x21, 0x01, 0xC7, 0xAA, 0x00, 0xC4, 0x46, 0x08, 0x52, 0x81, 0x46, 0x1E, 0xF2, 0x02, 0xE7, 0xA4, 0x00, 0xA4, 0x46, 0x18, 0xC1, 0x82, 0xE7, 0xAA, 0x00, 0xA0, 0x46, 0x06, 0x42, 0x00, 0xC7, 0xA6, 0x00, 0x58, 0xE7, 0xA4, 0x00, 0x58, 0x46, 0x06, 0x31, 0x02, 0x46, 0x04, 0x44, 0x80, 0xC7, 0xA8, 0x00, 0x5C, 0xE7, 0xAA, 0x00, 0x5C, 0x46, 0x08, 0x41, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0xE2, 0x82, 0x46, 0x0A, 0x21, 0x00, 0xC7, 0xAA, 0x00, 0x60, 0xE7, 0xA6, 0x00, 0x60, 0x46, 0x0A, 0x51, 0x82, 0x46, 0x06, 0x20, 0x00, 0x46, 0x08, 0xF1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0xC1, 0x82, 0x46, 0x06, 0x21, 0x00, 0xC7, 0xA6, 0x00, 0x60, 0xE7, 0xA8, 0x00, 0x60, 0x46, 0x0A, 0x32, 0x02, 0x46, 0x08, 0x23, 0x80, 0x46, 0x00, 0x91, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0E, 0x72, 0x02, 0x46, 0x08, 0x21, 0x01, 0x44, 0x81, 0x40, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x04, 0x40, 0x83, 0xC7, 0xA8, 0x00, 0x64, 0xE7, 0xA6, 0x00, 0x64, 0xC7, 0xA6, 0x00, 0x58, 0x46, 0x1E, 0x41, 0x02, 0xE7, 0xAA, 0x00, 0x58, 0x46, 0x18, 0x32, 0x82, 0x46, 0x0A, 0x21, 0x00, 0xC7, 0xAA, 0x00, 0x5C, 0xE7, 0xA8, 0x00, 0x5C, 0xC7, 0xA8, 0x00, 0x64, 0x46, 0x08, 0x52, 0x02, 0x46, 0x08, 0x25, 0x00, 0xC7, 0xA8, 0x00, 0x60, 0xC7, 0xA4, 0x00, 0x5C, 0x46, 0x08, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0x32, 0x02, 0x46, 0x08, 0x21, 0x80, 0xC7, 0xA4, 0x00, 0x58, 0x46, 0x04, 0x52, 0x02, 0x46, 0x08, 0x35, 0x80, 0x46, 0x14, 0x02, 0x82, 0x44, 0x80, 0x40, 0x00, 0x46, 0x16, 0x71, 0x02, 0x46, 0x04, 0x51, 0x81, 0x46, 0x02, 0x34, 0x02, 0x46, 0x08, 0x80, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x44, 0x81, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x50, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x26, 0x44, 0x80, 0x20, 0x00, 0x46, 0x16, 0x91, 0x02, 0x44, 0x80, 0x50, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x14, 0x71, 0x82, 0x46, 0x06, 0x22, 0x01, 0x46, 0x02, 0x40, 0x02, 0x46, 0x0A, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x1C, 0x44, 0x80, 0x20, 0x00, 0x44, 0x81, 0x20, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x00, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x16, 0x44, 0x80, 0x20, 0x00, 0x46, 0x00, 0x82, 0x00, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xD0, 0x46, 0x08, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x0F, 0x44, 0x80, 0x20, 0x00, 0x46, 0x1A, 0x50, 0x01, 0xC7, 0xA6, 0x00, 0x6C, 0xC7, 0xA4, 0x00, 0xCC, 0x46, 0x00, 0x32, 0x02, 0xC7, 0xA6, 0x00, 0xC4, 0x46, 0x08, 0x22, 0x80, 0xC7, 0xA4, 0x00, 0x68, 0x46, 0x00, 0x22, 0x02, 0xE7, 0xAA, 0x00, 0xCC, 0x46, 0x08, 0x32, 0x80, 0xE7, 0xAA, 0x00, 0xC4, 0x10, 0x00, 0x00, 0xF2, 0x86, 0x22, 0x00, 0x16, 0x44, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xD0, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0xF5, 0x00, 0x00, 0x00, 0x00, 0x44, 0x80, 0x30, 0x00, 0xC7, 0xA8, 0x00, 0xA4, 0x46, 0x06, 0xC0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x3C, 0x44, 0x80, 0x50, 0x00, 0x46, 0x18, 0x40, 0x03, 0x44, 0x80, 0x50, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x0A, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x35, 0x44, 0x80, 0x50, 0x00, 0x44, 0x81, 0x20, 0x00, 0xC7, 0xAA, 0x00, 0xB8, 0x46, 0x00, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x2F, 0x44, 0x80, 0x50, 0x00, 0x46, 0x00, 0xF1, 0x82, 0xC7, 0xA8, 0x00, 0xA8, 0x46, 0x00, 0x51, 0x02, 0x46, 0x08, 0x35, 0x81, 0xC7, 0xA6, 0x00, 0xA0, 0x46, 0x06, 0x26, 0x01, 0x46, 0x16, 0xB2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x18, 0xC2, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x0A, 0x43, 0x00, 0xC7, 0xA4, 0x00, 0x7C, 0x46, 0x00, 0x20, 0x3C, 0x46, 0x04, 0x06, 0x81, 0x45, 0x03, 0x00, 0x1F, 0x44, 0x80, 0x50, 0x00, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xA6, 0x00, 0xCC, 0xC7, 0xAA, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xB4, 0x82, 0x46, 0x12, 0x32, 0x00, 0x46, 0x0C, 0xC5, 0x02, 0xC7, 0xA6, 0x00, 0x7C, 0xE7, 0xA8, 0x00, 0xCC, 0xC4, 0x28, 0x8D, 0x44, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x14, 0x51, 0x00, 0x46, 0x08, 0x32, 0x80, 0xE7, 0xA4, 0x00, 0xC4, 0xE7, 0xAA, 0x00, 0x7C, 0xC6, 0x04, 0x00, 0x1C, 0xC6, 0x08, 0x00, 0x24, 0x46, 0x12, 0x21, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xA2, 0x82, 0xC4, 0x28, 0x8D, 0x48, 0x46, 0x0A, 0x31, 0x00, 0x46, 0x1A, 0x41, 0x82, 0x46, 0x06, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0xB7, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xAC, 0x86, 0x22, 0x00, 0x16, 0x44, 0x80, 0x50, 0x00, 0xC7, 0xA8, 0x00, 0xA4, 0x46, 0x0A, 0xE0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x4A, 0x86, 0x02, 0x00, 0x10, 0x46, 0x1C, 0x40, 0x03, 0x44, 0x80, 0x20, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x04, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x08, 0x86, 0x02, 0x00, 0x10, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xB4, 0x46, 0x00, 0x30, 0x3C, 0xC7, 0xA6, 0x00, 0xAC, 0x45, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x10, 0x00, 0x00, 0x3B, 0x86, 0x07, 0x00, 0x1A, 0x46, 0x00, 0x52, 0x02, 0xC7, 0xA4, 0x00, 0xA8, 0x46, 0x00, 0x32, 0x82, 0x46, 0x04, 0x45, 0x01, 0xC7, 0xA8, 0x00, 0xA0, 0x46, 0x08, 0x55, 0x81, 0x46, 0x14, 0xA1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x16, 0xB1, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x06, 0x23, 0x00, 0xC7, 0xA2, 0x00, 0x7C, 0x46, 0x00, 0x10, 0x3C, 0x46, 0x02, 0x06, 0x81, 0x45, 0x02, 0x00, 0x09, 0x46, 0x00, 0xD3, 0x03, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x10, 0x00, 0x00, 0x24, 0x86, 0x07, 0x00, 0x1A, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xAA, 0x00, 0xCC, 0xC7, 0xA4, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xA4, 0x82, 0x46, 0x12, 0x52, 0x00, 0x46, 0x0C, 0xB6, 0x02, 0xC7, 0xAA, 0x00, 0x7C, 0xE7, 0xA8, 0x00, 0xCC, 0xC4, 0x28, 0x8D, 0x4C, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x18, 0x21, 0x80, 0x46, 0x08, 0x51, 0x00, 0xE7, 0xA6, 0x00, 0xC4, 0xE7, 0xA4, 0x00, 0x7C, 0xC6, 0x06, 0x00, 0x1C, 0xC6, 0x08, 0x00, 0x24, 0x46, 0x12, 0x32, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xC1, 0x02, 0xC4, 0x28, 0x8D, 0x50, 0x46, 0x04, 0x51, 0x80, 0x46, 0x1A, 0x42, 0x82, 0x46, 0x0A, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x5E, 0x86, 0x22, 0x00, 0x16, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x86, 0x07, 0x00, 0x1A, 0x00, 0xA2, 0xC8, 0x23, 0x00, 0xC3, 0x40, 0x23, 0x44, 0x99, 0x20, 0x00, 0x44, 0x88, 0x30, 0x00, 0x00, 0xE4, 0x48, 0x23, 0x44, 0x89, 0x50, 0x00, 0x46, 0x80, 0x22, 0x20, 0x46, 0x80, 0x37, 0x20, 0x44, 0x82, 0x30, 0x00, 0xE7, 0xA8, 0x00, 0xB4, 0xC7, 0xA8, 0x00, 0xCC, 0x46, 0x80, 0x51, 0x20, 0x46, 0x80, 0x32, 0xA0, 0xE7, 0xA4, 0x00, 0xAC, 0xC7, 0xA6, 0x00, 0xC8, 0x46, 0x0A, 0x41, 0x01, 0x44, 0x83, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x42, 0xA0, 0x44, 0x84, 0x40, 0x00, 0xE7, 0xA4, 0x00, 0xA8, 0xC7, 0xA4, 0x00, 0xC4, 0x46, 0x0A, 0x30, 0x81, 0x46, 0x80, 0x41, 0xA0, 0x44, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xE0, 0x32, 0x46, 0x06, 0x22, 0x81, 0x45, 0x01, 0x00, 0x43, 0xE7, 0xAA, 0x00, 0xA0, 0x46, 0x1C, 0x10, 0x03, 0x44, 0x80, 0x20, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x04, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xB4, 0x46, 0x00, 0x30, 0x3C, 0xC7, 0xA6, 0x00, 0xAC, 0x45, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x52, 0x02, 0xC7, 0xA4, 0x00, 0xA8, 0x46, 0x00, 0x32, 0x82, 0x46, 0x04, 0x45, 0x01, 0xC7, 0xA8, 0x00, 0xA0, 0x46, 0x08, 0x55, 0x81, 0x46, 0x14, 0xA1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x16, 0xB1, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x06, 0x23, 0x00, 0xC7, 0xA2, 0x00, 0x7C, 0x46, 0x00, 0x10, 0x3C, 0x46, 0x02, 0x06, 0x81, 0x45, 0x01, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xAA, 0x00, 0xCC, 0xC7, 0xA4, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xA4, 0x82, 0x46, 0x12, 0x52, 0x00, 0x46, 0x0C, 0xB6, 0x02, 0xC7, 0xAA, 0x00, 0x7C, 0xE7, 0xA8, 0x00, 0xCC, 0xC4, 0x28, 0x8D, 0x54, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x18, 0x21, 0x80, 0x46, 0x08, 0x51, 0x00, 0xE7, 0xA6, 0x00, 0xC4, 0xE7, 0xA4, 0x00, 0x7C, 0xC6, 0x06, 0x00, 0x1C, 0xC6, 0x08, 0x00, 0x24, 0x46, 0x12, 0x32, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xC1, 0x02, 0xC4, 0x28, 0x8D, 0x58, 0x46, 0x04, 0x51, 0x80, 0x46, 0x1A, 0x42, 0x82, 0x46, 0x0A, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x86, 0x22, 0x00, 0x16, 0x28, 0x41, 0x00, 0x04, 0x10, 0x20, 0x00, 0x07, 0x26, 0x73, 0x00, 0x01, 0x00, 0x02, 0x50, 0x80, 0x02, 0x2A, 0x58, 0x21, 0xAD, 0x70, 0x00, 0x18, 0x86, 0x2C, 0x00, 0x16, 0x25, 0x8D, 0x00, 0x01, 0xA6, 0x2D, 0x00, 0x16, 0x56, 0x40, 0xFE, 0x1D, 0x8E, 0x50, 0x00, 0x04, 0x3C, 0x01, 0x40, 0x80, 0x44, 0x81, 0x00, 0x00, 0xC7, 0xA4, 0x00, 0xCC, 0xC7, 0xA6, 0x00, 0xC4, 0x02, 0x60, 0x10, 0x25, 0x46, 0x00, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x32, 0x82, 0xE7, 0xA8, 0x00, 0xCC, 0xE7, 0xAA, 0x00, 0xC4, 0xE6, 0x28, 0x00, 0x00, 0xC7, 0xA4, 0x00, 0xC4, 0xE6, 0x24, 0x00, 0x08, 0x8F, 0xBF, 0x00, 0x54, 0x8F, 0xB3, 0x00, 0x50, 0x8F, 0xB2, 0x00, 0x4C, 0x8F, 0xB1, 0x00, 0x48, 0x8F, 0xB0, 0x00, 0x44, 0xD7, 0xBE, 0x00, 0x38, 0xD7, 0xBC, 0x00, 0x30, 0xD7, 0xBA, 0x00, 0x28, 0xD7, 0xB8, 0x00, 0x20, 0xD7, 0xB6, 0x00, 0x18, 0xD7, 0xB4, 0x00, 0x10, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0xE0
        };

        static byte[] find_wall_collisions_from_list_regular_bounds = new byte[]
        {
            0x27, 0xBD, 0xFF, 0x20, 0xAF, 0xBF, 0x00, 0x54, 0xAF, 0xB3, 0x00, 0x50, 0xAF, 0xB2, 0x00, 0x4C, 0xAF, 0xB1, 0x00, 0x48, 0xAF, 0xB0, 0x00, 0x44, 0xF7, 0xBE, 0x00, 0x38, 0xF7, 0xBC, 0x00, 0x30, 0xF7, 0xBA, 0x00, 0x28, 0xF7, 0xB8, 0x00, 0x20, 0xF7, 0xB6, 0x00, 0x18, 0xF7, 0xB4, 0x00, 0x10, 0xC4, 0xAA, 0x00, 0x10, 0x3C, 0x01, 0x43, 0x48, 0x44, 0x81, 0x00, 0x00, 0xE7, 0xAA, 0x00, 0xD0, 0xC4, 0xA4, 0x00, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x00, 0xA0, 0x88, 0x25, 0xE7, 0xA4, 0x00, 0xCC, 0xC4, 0xA6, 0x00, 0x0C, 0xC4, 0xA8, 0x00, 0x04, 0x00, 0x80, 0x90, 0x25, 0x00, 0x00, 0x98, 0x25, 0x46, 0x06, 0x42, 0x80, 0xC7, 0xA8, 0x00, 0xD0, 0x44, 0x81, 0x30, 0x00, 0x46, 0x08, 0x00, 0x3C, 0xE7, 0xAA, 0x00, 0xC8, 0x46, 0x06, 0x42, 0x81, 0xC4, 0xA4, 0x00, 0x08, 0xE7, 0xAA, 0x00, 0x7C, 0x45, 0x00, 0x00, 0x02, 0xE7, 0xA4, 0x00, 0xC4, 0xE7, 0xA0, 0x00, 0xD0, 0x52, 0x40, 0x01, 0xE7, 0xC7, 0xA8, 0x00, 0xCC, 0x8E, 0x50, 0x00, 0x04, 0xC7, 0xA4, 0x00, 0xC8, 0x8E, 0x52, 0x00, 0x00, 0x86, 0x0E, 0x00, 0x06, 0x44, 0x8E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x32, 0xA0, 0x46, 0x0A, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x86, 0x0F, 0x00, 0x08, 0x44, 0x8F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x41, 0xA0, 0x46, 0x04, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xD1, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x0A, 0x00, 0x1C, 0xC7, 0xA4, 0x00, 0xCC, 0xE7, 0xAA, 0x00, 0x70, 0xC7, 0xA6, 0x00, 0x70, 0xC6, 0x08, 0x00, 0x24, 0x46, 0x04, 0x32, 0x82, 0xE7, 0xA8, 0x00, 0x6C, 0xC6, 0x08, 0x00, 0x20, 0xC7, 0xA6, 0x00, 0xC8, 0x46, 0x06, 0x41, 0x02, 0xC7, 0xA6, 0x00, 0x6C, 0x46, 0x04, 0x52, 0x00, 0xC7, 0xAA, 0x00, 0xC4, 0x46, 0x0A, 0x31, 0x02, 0xC6, 0x0A, 0x00, 0x28, 0x46, 0x04, 0x41, 0x80, 0xC7, 0xA8, 0x00, 0xD0, 0x46, 0x0A, 0x36, 0x80, 0x44, 0x80, 0x20, 0x00, 0x46, 0x1A, 0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x01, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xD0, 0x3C, 0x3C, 0x18, 0x80, 0x36, 0x45, 0x01, 0x01, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x87, 0x18, 0x11, 0x80, 0x53, 0x00, 0x00, 0x08, 0x86, 0x02, 0x00, 0x00, 0x82, 0x19, 0x00, 0x04, 0x33, 0x28, 0x00, 0x02, 0x51, 0x00, 0x00, 0x1C, 0x86, 0x04, 0x00, 0x0E, 0x10, 0x00, 0x01, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x24, 0x01, 0x00, 0x72, 0x10, 0x41, 0x01, 0xA9, 0x24, 0x01, 0x00, 0x7B, 0x14, 0x41, 0x00, 0x13, 0x3C, 0x02, 0x80, 0x36, 0x8C, 0x42, 0x11, 0x60, 0x10, 0x40, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x84, 0x49, 0x00, 0x74, 0x31, 0x2A, 0x00, 0x40, 0x15, 0x40, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x0A, 0x3C, 0x0B, 0x80, 0x36, 0x8D, 0x6B, 0x11, 0x58, 0x3C, 0x0C, 0x80, 0x33, 0x55, 0x62, 0x00, 0x07, 0x86, 0x04, 0x00, 0x0E, 0x8D, 0x8C, 0xD9, 0x3C, 0x8D, 0x8D, 0x00, 0x04, 0x31, 0xAE, 0x00, 0x02, 0x15, 0xC0, 0x01, 0x95, 0x00, 0x00, 0x00, 0x00, 0x86, 0x04, 0x00, 0x0E, 0x86, 0x09, 0x00, 0x14, 0x86, 0x02, 0x00, 0x0A, 0x86, 0x0F, 0x00, 0x10, 0x01, 0x24, 0x50, 0x23, 0x44, 0x8A, 0x20, 0x00, 0x86, 0x03, 0x00, 0x0C, 0x86, 0x19, 0x00, 0x12, 0x46, 0x80, 0x22, 0x20, 0x01, 0xE2, 0xC0, 0x23, 0x44, 0x98, 0x30, 0x00, 0x03, 0x23, 0x40, 0x23, 0x44, 0x88, 0x50, 0x00, 0x46, 0x80, 0x37, 0xA0, 0xE7, 0xA8, 0x00, 0xB8, 0x86, 0x0B, 0x00, 0x16, 0x3C, 0x01, 0x3F, 0x80, 0x01, 0x62, 0x60, 0x23, 0x44, 0x8C, 0x30, 0x00, 0x46, 0x80, 0x56, 0x20, 0x46, 0x80, 0x32, 0xA0, 0xE7, 0xAA, 0x00, 0xB4, 0x86, 0x0D, 0x00, 0x18, 0x86, 0x0F, 0x00, 0x1A, 0xE7, 0xA8, 0x00, 0x58, 0x01, 0xA3, 0x70, 0x23, 0x44, 0x8E, 0x20, 0x00, 0x01, 0xE4, 0xC0, 0x23, 0x44, 0x98, 0x30, 0x00, 0x46, 0x80, 0x27, 0x20, 0x44, 0x82, 0x40, 0x00, 0xE7, 0xAA, 0x00, 0x5C, 0x44, 0x83, 0x50, 0x00, 0x46, 0x80, 0x31, 0x20, 0xC7, 0xA6, 0x00, 0xCC, 0x46, 0x80, 0x42, 0x20, 0xE7, 0xA4, 0x00, 0xAC, 0xE7, 0xA4, 0x00, 0x60, 0x44, 0x84, 0x20, 0x00, 0x46, 0x80, 0x52, 0xA0, 0x46, 0x08, 0x31, 0x81, 0xC7, 0xA8, 0x00, 0xC8, 0x46, 0x80, 0x21, 0x20, 0xE7, 0xA6, 0x00, 0xA8, 0xE7, 0xA6, 0x00, 0x64, 0x46, 0x0A, 0x42, 0x01, 0xC7, 0xAA, 0x00, 0xC4, 0x46, 0x04, 0x52, 0x81, 0x46, 0x1E, 0xF1, 0x02, 0xE7, 0xA8, 0x00, 0xA4, 0x46, 0x18, 0xC1, 0x82, 0xE7, 0xAA, 0x00, 0xA0, 0x46, 0x06, 0x21, 0x00, 0xC7, 0xA6, 0x00, 0x58, 0xE7, 0xA8, 0x00, 0x58, 0x46, 0x06, 0x32, 0x02, 0x46, 0x08, 0x24, 0x80, 0xC7, 0xA4, 0x00, 0x5C, 0xE7, 0xAA, 0x00, 0x5C, 0x46, 0x04, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0xE2, 0x82, 0x46, 0x0A, 0x42, 0x00, 0xC7, 0xAA, 0x00, 0x60, 0xE7, 0xA6, 0x00, 0x60, 0x46, 0x0A, 0x51, 0x82, 0x46, 0x06, 0x40, 0x00, 0x46, 0x04, 0xF2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0xC1, 0x82, 0x46, 0x06, 0x42, 0x00, 0xC7, 0xA6, 0x00, 0x60, 0xE7, 0xA4, 0x00, 0x60, 0x46, 0x0A, 0x31, 0x02, 0x46, 0x04, 0x43, 0x80, 0x46, 0x00, 0x92, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0E, 0x71, 0x02, 0x46, 0x04, 0x42, 0x01, 0x44, 0x81, 0x20, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x08, 0x20, 0x83, 0xC7, 0xA4, 0x00, 0x64, 0xE7, 0xA6, 0x00, 0x64, 0xC7, 0xA6, 0x00, 0x58, 0x46, 0x1E, 0x22, 0x02, 0xE7, 0xAA, 0x00, 0x58, 0x46, 0x18, 0x32, 0x82, 0x46, 0x0A, 0x42, 0x00, 0xC7, 0xAA, 0x00, 0x5C, 0xE7, 0xA4, 0x00, 0x5C, 0xC7, 0xA4, 0x00, 0x64, 0x46, 0x04, 0x51, 0x02, 0x46, 0x04, 0x45, 0x00, 0xC7, 0xA4, 0x00, 0x60, 0xC7, 0xA8, 0x00, 0x5C, 0x46, 0x04, 0x42, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1C, 0x31, 0x02, 0x46, 0x04, 0x41, 0x80, 0xC7, 0xA8, 0x00, 0x58, 0x46, 0x08, 0x51, 0x02, 0x46, 0x04, 0x35, 0x80, 0x46, 0x14, 0x02, 0x82, 0x44, 0x80, 0x20, 0x00, 0x46, 0x16, 0x72, 0x02, 0x46, 0x08, 0x51, 0x81, 0x46, 0x02, 0x34, 0x02, 0x46, 0x04, 0x80, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x44, 0x81, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x50, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x26, 0x44, 0x80, 0x40, 0x00, 0x46, 0x16, 0x92, 0x02, 0x44, 0x80, 0x50, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x14, 0x71, 0x82, 0x46, 0x06, 0x41, 0x01, 0x46, 0x02, 0x20, 0x02, 0x46, 0x0A, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x1C, 0x44, 0x80, 0x40, 0x00, 0x44, 0x81, 0x40, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x00, 0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x16, 0x44, 0x80, 0x40, 0x00, 0x46, 0x00, 0x81, 0x00, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xD0, 0x46, 0x04, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x0F, 0x44, 0x80, 0x40, 0x00, 0x46, 0x1A, 0x50, 0x01, 0xC7, 0xA6, 0x00, 0x70, 0xC7, 0xA8, 0x00, 0xCC, 0x46, 0x00, 0x31, 0x02, 0xC7, 0xA6, 0x00, 0xC4, 0x46, 0x04, 0x42, 0x80, 0xC7, 0xA8, 0x00, 0x6C, 0x46, 0x00, 0x41, 0x02, 0xE7, 0xAA, 0x00, 0xCC, 0x46, 0x04, 0x32, 0x80, 0xE7, 0xAA, 0x00, 0xC4, 0x10, 0x00, 0x00, 0xF2, 0x86, 0x22, 0x00, 0x16, 0x44, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0xD0, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0xF5, 0x00, 0x00, 0x00, 0x00, 0x44, 0x80, 0x30, 0x00, 0xC7, 0xA4, 0x00, 0xA4, 0x46, 0x06, 0xC0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x3C, 0x44, 0x80, 0x50, 0x00, 0x46, 0x18, 0x20, 0x03, 0x44, 0x80, 0x50, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x0A, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x35, 0x44, 0x80, 0x50, 0x00, 0x44, 0x81, 0x40, 0x00, 0xC7, 0xAA, 0x00, 0xB8, 0x46, 0x00, 0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x2F, 0x44, 0x80, 0x50, 0x00, 0x46, 0x00, 0xF1, 0x82, 0xC7, 0xA4, 0x00, 0xA8, 0x46, 0x00, 0x52, 0x02, 0x46, 0x04, 0x35, 0x81, 0xC7, 0xA6, 0x00, 0xA0, 0x46, 0x06, 0x46, 0x01, 0x46, 0x16, 0xB1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x18, 0xC2, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x0A, 0x23, 0x00, 0xC7, 0xA8, 0x00, 0x7C, 0x46, 0x00, 0x40, 0x3C, 0x46, 0x08, 0x06, 0x81, 0x45, 0x03, 0x00, 0x1F, 0x44, 0x80, 0x50, 0x00, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xA6, 0x00, 0xCC, 0xC7, 0xAA, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xB4, 0x82, 0x46, 0x12, 0x31, 0x00, 0x46, 0x0C, 0xC5, 0x02, 0xC7, 0xA6, 0x00, 0x7C, 0xE7, 0xA4, 0x00, 0xCC, 0xC4, 0x24, 0x8C, 0xE4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x14, 0x52, 0x00, 0x46, 0x04, 0x32, 0x80, 0xE7, 0xA8, 0x00, 0xC4, 0xE7, 0xAA, 0x00, 0x7C, 0xC6, 0x08, 0x00, 0x1C, 0xC6, 0x04, 0x00, 0x24, 0x46, 0x12, 0x41, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xA2, 0x82, 0xC4, 0x24, 0x8C, 0xE8, 0x46, 0x0A, 0x32, 0x00, 0x46, 0x1A, 0x21, 0x82, 0x46, 0x06, 0x40, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0xB7, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xAC, 0x86, 0x22, 0x00, 0x16, 0x44, 0x80, 0x50, 0x00, 0xC7, 0xA4, 0x00, 0xA4, 0x46, 0x0A, 0xE0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x4A, 0x86, 0x02, 0x00, 0x10, 0x46, 0x1C, 0x20, 0x03, 0x44, 0x80, 0x40, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x08, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x08, 0x86, 0x02, 0x00, 0x10, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xB4, 0x46, 0x00, 0x30, 0x3C, 0xC7, 0xA6, 0x00, 0xAC, 0x45, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x10, 0x00, 0x00, 0x3B, 0x86, 0x07, 0x00, 0x1A, 0x46, 0x00, 0x51, 0x02, 0xC7, 0xA8, 0x00, 0xA8, 0x46, 0x00, 0x32, 0x82, 0x46, 0x08, 0x25, 0x01, 0xC7, 0xA4, 0x00, 0xA0, 0x46, 0x04, 0x55, 0x81, 0x46, 0x14, 0xA2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x16, 0xB1, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x06, 0x43, 0x00, 0xC7, 0xA2, 0x00, 0x7C, 0x46, 0x00, 0x10, 0x3C, 0x46, 0x02, 0x06, 0x81, 0x45, 0x02, 0x00, 0x09, 0x46, 0x00, 0xD3, 0x03, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x10, 0x00, 0x00, 0x24, 0x86, 0x07, 0x00, 0x1A, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xAA, 0x00, 0xCC, 0xC7, 0xA8, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xA4, 0x82, 0x46, 0x12, 0x51, 0x00, 0x46, 0x0C, 0xB6, 0x02, 0xC7, 0xAA, 0x00, 0x7C, 0xE7, 0xA4, 0x00, 0xCC, 0xC4, 0x24, 0x8C, 0xEC, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x18, 0x41, 0x80, 0x46, 0x04, 0x52, 0x00, 0xE7, 0xA6, 0x00, 0xC4, 0xE7, 0xA8, 0x00, 0x7C, 0xC6, 0x06, 0x00, 0x1C, 0xC6, 0x04, 0x00, 0x24, 0x46, 0x12, 0x32, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xC2, 0x02, 0xC4, 0x24, 0x8C, 0xF0, 0x46, 0x08, 0x51, 0x80, 0x46, 0x1A, 0x22, 0x82, 0x46, 0x0A, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x5E, 0x86, 0x22, 0x00, 0x16, 0x86, 0x02, 0x00, 0x10, 0x86, 0x03, 0x00, 0x12, 0x86, 0x04, 0x00, 0x14, 0x86, 0x05, 0x00, 0x16, 0x86, 0x06, 0x00, 0x18, 0x86, 0x07, 0x00, 0x1A, 0x00, 0xA2, 0xC8, 0x23, 0x00, 0xC3, 0x40, 0x23, 0x44, 0x99, 0x40, 0x00, 0x44, 0x88, 0x30, 0x00, 0x00, 0xE4, 0x48, 0x23, 0x44, 0x89, 0x50, 0x00, 0x46, 0x80, 0x41, 0x20, 0x46, 0x80, 0x37, 0x20, 0x44, 0x82, 0x30, 0x00, 0xE7, 0xA4, 0x00, 0xB4, 0xC7, 0xA4, 0x00, 0xCC, 0x46, 0x80, 0x52, 0x20, 0x46, 0x80, 0x32, 0xA0, 0xE7, 0xA8, 0x00, 0xAC, 0xC7, 0xA6, 0x00, 0xC8, 0x46, 0x0A, 0x22, 0x01, 0x44, 0x83, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x22, 0xA0, 0x44, 0x84, 0x20, 0x00, 0xE7, 0xA8, 0x00, 0xA8, 0xC7, 0xA8, 0x00, 0xC4, 0x46, 0x0A, 0x30, 0x81, 0x46, 0x80, 0x21, 0xA0, 0x44, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xE0, 0x32, 0x46, 0x06, 0x42, 0x81, 0x45, 0x01, 0x00, 0x43, 0xE7, 0xAA, 0x00, 0xA0, 0x46, 0x1C, 0x10, 0x03, 0x44, 0x80, 0x40, 0x00, 0x3C, 0x01, 0x3F, 0x80, 0x46, 0x08, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x44, 0x81, 0x30, 0x00, 0xC7, 0xAA, 0x00, 0xB4, 0x46, 0x00, 0x30, 0x3C, 0xC7, 0xA6, 0x00, 0xAC, 0x45, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x51, 0x02, 0xC7, 0xA8, 0x00, 0xA8, 0x46, 0x00, 0x32, 0x82, 0x46, 0x08, 0x25, 0x01, 0xC7, 0xA4, 0x00, 0xA0, 0x46, 0x04, 0x55, 0x81, 0x46, 0x14, 0xA2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x46, 0x16, 0xB1, 0x82, 0x0C, 0x0C, 0x8E, 0x94, 0x46, 0x06, 0x43, 0x00, 0xC7, 0xA2, 0x00, 0x7C, 0x46, 0x00, 0x10, 0x3C, 0x46, 0x02, 0x06, 0x81, 0x45, 0x01, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0xD3, 0x03, 0xC7, 0xAA, 0x00, 0xCC, 0xC7, 0xA8, 0x00, 0xC4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x0C, 0xA4, 0x82, 0x46, 0x12, 0x51, 0x00, 0x46, 0x0C, 0xB6, 0x02, 0xC7, 0xAA, 0x00, 0x7C, 0xE7, 0xA4, 0x00, 0xCC, 0xC4, 0x24, 0x8C, 0xF4, 0x3C, 0x01, 0x80, 0x39, 0x46, 0x18, 0x41, 0x80, 0x46, 0x04, 0x52, 0x00, 0xE7, 0xA6, 0x00, 0xC4, 0xE7, 0xA8, 0x00, 0x7C, 0xC6, 0x06, 0x00, 0x1C, 0xC6, 0x04, 0x00, 0x24, 0x46, 0x12, 0x32, 0x82, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xC2, 0x02, 0xC4, 0x24, 0x8C, 0xF8, 0x46, 0x08, 0x51, 0x80, 0x46, 0x1A, 0x22, 0x82, 0x46, 0x0A, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x86, 0x22, 0x00, 0x16, 0x28, 0x41, 0x00, 0x04, 0x10, 0x20, 0x00, 0x07, 0x26, 0x73, 0x00, 0x01, 0x00, 0x02, 0x50, 0x80, 0x02, 0x2A, 0x58, 0x21, 0xAD, 0x70, 0x00, 0x18, 0x86, 0x2C, 0x00, 0x16, 0x25, 0x8D, 0x00, 0x01, 0xA6, 0x2D, 0x00, 0x16, 0x56, 0x40, 0xFE, 0x1D, 0x8E, 0x50, 0x00, 0x04, 0xC7, 0xA8, 0x00, 0xCC, 0x02, 0x60, 0x10, 0x25, 0xE6, 0x28, 0x00, 0x00, 0xC7, 0xA4, 0x00, 0xC4, 0xE6, 0x24, 0x00, 0x08, 0x8F, 0xBF, 0x00, 0x54, 0x8F, 0xB3, 0x00, 0x50, 0x8F, 0xB2, 0x00, 0x4C, 0x8F, 0xB1, 0x00, 0x48, 0x8F, 0xB0, 0x00, 0x44, 0xD7, 0xBE, 0x00, 0x38, 0xD7, 0xBC, 0x00, 0x30, 0xD7, 0xBA, 0x00, 0x28, 0xD7, 0xB8, 0x00, 0x20, 0xD7, 0xB6, 0x00, 0x18, 0xD7, 0xB4, 0x00, 0x10, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0xE0
        };

        static byte[] perform_air_step_methods = new byte[]
        {
            0x27, 0xBD, 0xFF, 0xE8, 0xAF, 0xBF, 0x00, 0x14, 0xAF, 0xA4, 0x00, 0x18, 0xC4, 0x84, 0x00, 0x00, 0x44, 0x85, 0x70, 0x00, 0x44, 0x86, 0x60, 0x00, 0xE4, 0xE4, 0x00, 0x00, 0xC4, 0x86, 0x00, 0x04, 0x00, 0x80, 0x28, 0x25, 0xE4, 0xE6, 0x00, 0x04, 0xC4, 0x88, 0x00, 0x08, 0xE4, 0xEE, 0x00, 0x0C, 0xE4, 0xEC, 0x00, 0x10, 0xE4, 0xE8, 0x00, 0x08, 0xAF, 0xA7, 0x00, 0x24, 0xAF, 0xA5, 0x00, 0x18, 0x0C, 0x0E, 0x03, 0xA3, 0x00, 0xE0, 0x20, 0x25, 0x8F, 0xA7, 0x00, 0x24, 0x8F, 0xA5, 0x00, 0x18, 0xC4, 0xEA, 0x00, 0x00, 0xE4, 0xAA, 0x00, 0x00, 0xC4, 0xF0, 0x00, 0x04, 0xE4, 0xB0, 0x00, 0x04, 0xC4, 0xF2, 0x00, 0x08, 0xE4, 0xB2, 0x00, 0x08, 0x8F, 0xBF, 0x00, 0x14, 0x27, 0xBD, 0x00, 0x18, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x27, 0xBD, 0xFF, 0xC0, 0xAF, 0xBF, 0x00, 0x3C, 0xAF, 0xBE, 0x00, 0x38, 0xAF, 0xB7, 0x00, 0x34, 0xAF, 0xB6, 0x00, 0x30, 0xAF, 0xB5, 0x00, 0x2C, 0xAF, 0xB4, 0x00, 0x28, 0xAF, 0xB3, 0x00, 0x24, 0xAF, 0xB2, 0x00, 0x20, 0xAF, 0xB1, 0x00, 0x1C, 0xAF, 0xB0, 0x00, 0x18, 0x8C, 0x82, 0x00, 0x60, 0x00, 0x80, 0x98, 0x25, 0x00, 0xA0, 0xA8, 0x25, 0x10, 0x40, 0x00, 0x0A, 0x00, 0x00, 0xF0, 0x25, 0xC4, 0x4C, 0x00, 0x24, 0x0C, 0x0D, 0xEA, 0x6A, 0xC4, 0x4E, 0x00, 0x1C, 0x86, 0x6E, 0x00, 0x2E, 0x00, 0x4E, 0xA0, 0x23, 0x06, 0x83, 0x00, 0x05, 0x86, 0xAF, 0x00, 0x16, 0x10, 0x00, 0x00, 0x02, 0x00, 0x14, 0xA0, 0x23, 0x00, 0x00, 0xA0, 0x25, 0x86, 0xAF, 0x00, 0x16, 0x00, 0x00, 0x90, 0x25, 0x3C, 0x17, 0x40, 0x00, 0x19, 0xE0, 0x00, 0x2B, 0x24, 0x16, 0x00, 0x01, 0x00, 0x12, 0xC0, 0x80, 0x02, 0xB8, 0x88, 0x21, 0x8E, 0x30, 0x00, 0x18, 0x52, 0x00, 0x00, 0x20, 0x86, 0xAF, 0x00, 0x16, 0xC6, 0x0C, 0x00, 0x24, 0x0C, 0x0D, 0xEA, 0x6A, 0xC6, 0x0E, 0x00, 0x1C, 0x8E, 0x30, 0x00, 0x18, 0x86, 0x79, 0x00, 0x2E, 0x86, 0x0A, 0x00, 0x00, 0x00, 0x59, 0x18, 0x23, 0x00, 0x03, 0x44, 0x00, 0x16, 0xCA, 0x00, 0x04, 0x00, 0x08, 0x1C, 0x03, 0xAE, 0x70, 0x00, 0x60, 0x10, 0x00, 0x00, 0x1A, 0x24, 0x02, 0x00, 0x06, 0x04, 0x61, 0x00, 0x03, 0x00, 0x60, 0x10, 0x25, 0x10, 0x00, 0x00, 0x01, 0x00, 0x03, 0x10, 0x23, 0x02, 0x82, 0x08, 0x2A, 0x10, 0x20, 0x00, 0x0B, 0x28, 0x61, 0xA0, 0x00, 0x00, 0x40, 0xA0, 0x25, 0x14, 0x20, 0x00, 0x04, 0xAE, 0x70, 0x00, 0x60, 0x28, 0x61, 0x60, 0x01, 0x54, 0x20, 0x00, 0x06, 0x86, 0xAF, 0x00, 0x16, 0x8E, 0x6B, 0x00, 0x04, 0x24, 0x1E, 0x00, 0x02, 0x01, 0x77, 0x60, 0x25, 0xAE, 0x6C, 0x00, 0x04, 0x86, 0xAF, 0x00, 0x16, 0x26, 0x52, 0x00, 0x01, 0x00, 0x12, 0x6C, 0x00, 0x00, 0x0D, 0x94, 0x03, 0x02, 0x4F, 0x08, 0x2A, 0x54, 0x20, 0xFF, 0xD8, 0x00, 0x12, 0xC0, 0x80, 0x03, 0xC0, 0x10, 0x25, 0x8F, 0xBF, 0x00, 0x3C, 0x8F, 0xB0, 0x00, 0x18, 0x8F, 0xB1, 0x00, 0x1C, 0x8F, 0xB2, 0x00, 0x20, 0x8F, 0xB3, 0x00, 0x24, 0x8F, 0xB4, 0x00, 0x28, 0x8F, 0xB5, 0x00, 0x2C, 0x8F, 0xB6, 0x00, 0x30, 0x8F, 0xB7, 0x00, 0x34, 0x8F, 0xBE, 0x00, 0x38, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40, 0x27, 0xBD, 0xFF, 0xE0, 0xAF, 0xBF, 0x00, 0x1C, 0xAF, 0xB0, 0x00, 0x18, 0xC4, 0x86, 0x00, 0x4C, 0x44, 0x80, 0x20, 0x00, 0x00, 0xC0, 0x80, 0x25, 0x46, 0x06, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x10, 0x25, 0x10, 0xA0, 0x00, 0x13, 0x8F, 0xA2, 0x00, 0x30, 0xC4, 0x80, 0x00, 0x48, 0xC4, 0xA8, 0x00, 0x1C, 0xC4, 0x82, 0x00, 0x50, 0xC4, 0xB2, 0x00, 0x24, 0x46, 0x00, 0x42, 0x82, 0xC6, 0x08, 0x00, 0x24, 0x46, 0x02, 0x91, 0x02, 0x46, 0x04, 0x51, 0x80, 0x46, 0x08, 0x14, 0x82, 0xC6, 0x0A, 0x00, 0x1C, 0x46, 0x00, 0x51, 0x02, 0x46, 0x04, 0x92, 0x00, 0x46, 0x08, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x04, 0xC4, 0x52, 0x00, 0x08, 0x10, 0x00, 0x00, 0x37, 0x00, 0xA0, 0x10, 0x25, 0xC4, 0x52, 0x00, 0x08, 0xC4, 0xE4, 0x00, 0x08, 0xC4, 0x50, 0x00, 0x00, 0xC4, 0xEA, 0x00, 0x00, 0x46, 0x04, 0x90, 0x81, 0xC4, 0x88, 0x00, 0x50, 0xC4, 0x92, 0x00, 0x48, 0x46, 0x0A, 0x80, 0x01, 0x46, 0x02, 0x42, 0x82, 0x44, 0x80, 0x30, 0x00, 0x3C, 0x01, 0x42, 0x70, 0x46, 0x12, 0x01, 0x02, 0x46, 0x04, 0x52, 0x00, 0x46, 0x08, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x04, 0x44, 0x81, 0x00, 0x00, 0x10, 0x00, 0x00, 0x24, 0x00, 0xA0, 0x10, 0x25, 0x44, 0x81, 0x00, 0x00, 0xC6, 0x12, 0x00, 0x1C, 0x8F, 0xA3, 0x00, 0x34, 0x3C, 0x01, 0x43, 0x20, 0x46, 0x00, 0x92, 0x82, 0x46, 0x0A, 0x81, 0x01, 0xE4, 0x64, 0x00, 0x00, 0xC6, 0x08, 0x00, 0x24, 0xC4, 0x46, 0x00, 0x08, 0xC4, 0x6C, 0x00, 0x00, 0x46, 0x00, 0x44, 0x82, 0x44, 0x81, 0x40, 0x00, 0x46, 0x12, 0x32, 0x81, 0xE4, 0x6A, 0x00, 0x08, 0xC4, 0x44, 0x00, 0x04, 0x8C, 0x66, 0x00, 0x08, 0xAF, 0xA5, 0x00, 0x24, 0x8F, 0xA7, 0x00, 0x38, 0x0C, 0x0E, 0x06, 0x40, 0x46, 0x08, 0x23, 0x80, 0x8F, 0xA3, 0x00, 0x34, 0x8F, 0xA2, 0x00, 0x30, 0x8F, 0xA5, 0x00, 0x24, 0xE4, 0x60, 0x00, 0x04, 0xC4, 0x52, 0x00, 0x04, 0x3C, 0x01, 0x42, 0xC8, 0x44, 0x81, 0x30, 0x00, 0x46, 0x12, 0x02, 0x81, 0x02, 0x00, 0x10, 0x25, 0x46, 0x06, 0x50, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0xA0, 0x10, 0x25, 0x8F, 0xBF, 0x00, 0x1C, 0x8F, 0xB0, 0x00, 0x18, 0x27, 0xBD, 0x00, 0x20, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x27, 0xBD, 0xFF, 0x30, 0xAF, 0xB3, 0x00, 0x34, 0xAF, 0xB2, 0x00, 0x30, 0x00, 0x80, 0x90, 0x25, 0x27, 0xB3, 0x00, 0xBC, 0xAF, 0xBF, 0x00, 0x3C, 0xAF, 0xB4, 0x00, 0x38, 0xAF, 0xB1, 0x00, 0x2C, 0xAF, 0xB0, 0x00, 0x28, 0x00, 0xC0, 0x80, 0x25, 0xAF, 0xA5, 0x00, 0xD4, 0x00, 0x00, 0x88, 0x25, 0x00, 0x00, 0xA0, 0x25, 0x0C, 0x0D, 0xE2, 0x00, 0x02, 0x60, 0x20, 0x25, 0x02, 0x60, 0x20, 0x25, 0x3C, 0x05, 0x43, 0x16, 0x3C, 0x06, 0x42, 0x48, 0x0C, 0x10, 0x22, 0x40, 0x27, 0xA7, 0x00, 0x88, 0x02, 0x60, 0x20, 0x25, 0x3C, 0x05, 0x41, 0xF0, 0x3C, 0x06, 0x42, 0x48, 0x0C, 0x10, 0x22, 0x40, 0x27, 0xA7, 0x00, 0x60, 0xC7, 0xAE, 0x00, 0xC0, 0xC7, 0xAC, 0x00, 0xBC, 0x8F, 0xA6, 0x00, 0xC4, 0x0C, 0x0E, 0x06, 0x40, 0x27, 0xA7, 0x00, 0x58, 0x44, 0x05, 0x00, 0x00, 0xE7, 0xA0, 0x00, 0x48, 0x02, 0x60, 0x20, 0x25, 0x0C, 0x09, 0x46, 0xBF, 0x27, 0xA6, 0x00, 0x5C, 0xC7, 0xAC, 0x00, 0xBC, 0xC7, 0xAE, 0x00, 0xC4, 0x0C, 0x0E, 0x06, 0xE8, 0xE7, 0xA0, 0x00, 0x4C, 0x8F, 0xAE, 0x00, 0x58, 0xC7, 0xA2, 0x00, 0x4C, 0xC7, 0xA4, 0x00, 0xC0, 0x55, 0xC0, 0x00, 0x0E, 0x8E, 0x4F, 0x00, 0x0C, 0xC6, 0x40, 0x00, 0x70, 0xC7, 0xA6, 0x00, 0xC0, 0x24, 0x02, 0x00, 0x02, 0x46, 0x00, 0x20, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x9F, 0x24, 0x02, 0x00, 0x01, 0x10, 0x00, 0x00, 0x9D, 0xE6, 0x46, 0x00, 0x40, 0x8E, 0x4F, 0x00, 0x0C, 0xC7, 0xA8, 0x00, 0x48, 0x00, 0x0F, 0xC3, 0xC0, 0x07, 0x03, 0x00, 0x0B, 0xC7, 0xAE, 0x00, 0xC0, 0x46, 0x00, 0x40, 0x3C, 0x3C, 0x19, 0x80, 0x30, 0x27, 0x39, 0x17, 0xA8, 0x3C, 0x01, 0x80, 0x30, 0x45, 0x02, 0x00, 0x05, 0xC7, 0xAE, 0x00, 0xC0, 0xE7, 0xA0, 0x00, 0x48, 0xAF, 0xB9, 0x00, 0x58, 0xE4, 0x20, 0x17, 0xD0, 0xC7, 0xAE, 0x00, 0xC0, 0xC7, 0xAA, 0x00, 0x48, 0x3C, 0x01, 0x43, 0x20, 0x46, 0x0A, 0x70, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x15, 0x44, 0x81, 0x80, 0x00, 0x46, 0x0A, 0x14, 0x81, 0x3C, 0x01, 0x43, 0x20, 0x44, 0x81, 0x80, 0x00, 0xC7, 0xA4, 0x00, 0xBC, 0x46, 0x12, 0x80, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x09, 0xC7, 0xAA, 0x00, 0x48, 0xE6, 0x44, 0x00, 0x3C, 0xC7, 0xA6, 0x00, 0xC4, 0xE6, 0x46, 0x00, 0x44, 0x8F, 0xA8, 0x00, 0x58, 0xAE, 0x48, 0x00, 0x68, 0xC7, 0xA8, 0x00, 0x48, 0xE6, 0x48, 0x00, 0x70, 0xC7, 0xAA, 0x00, 0x48, 0x24, 0x02, 0x00, 0x01, 0x10, 0x00, 0x00, 0x75, 0xE6, 0x4A, 0x00, 0x40, 0x44, 0x81, 0x80, 0x00, 0x32, 0x0B, 0x00, 0x01, 0x46, 0x10, 0x74, 0x80, 0x46, 0x12, 0x10, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x44, 0x80, 0x00, 0x00, 0xC6, 0x44, 0x00, 0x4C, 0x32, 0x09, 0x00, 0x02, 0xC7, 0xA6, 0x00, 0xC0, 0x46, 0x04, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x0F, 0xC6, 0x40, 0x00, 0x70, 0x11, 0x20, 0x00, 0x0A, 0xE6, 0x40, 0x00, 0x4C, 0x8E, 0x42, 0x00, 0x64, 0x10, 0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x84, 0x4A, 0x00, 0x00, 0x24, 0x01, 0x00, 0x05, 0x15, 0x41, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x5B, 0x24, 0x02, 0x00, 0x04, 0x10, 0x00, 0x00, 0x59, 0x00, 0x00, 0x10, 0x25, 0xC6, 0x40, 0x00, 0x70, 0xC7, 0xA8, 0x00, 0xC0, 0x24, 0x02, 0x00, 0x05, 0x46, 0x00, 0x30, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x4F, 0x24, 0x02, 0x00, 0x01, 0x10, 0x00, 0x00, 0x4D, 0xE6, 0x48, 0x00, 0x40, 0x11, 0x60, 0x00, 0x3B, 0x87, 0xAC, 0x00, 0x9E, 0x15, 0x80, 0x00, 0x39, 0x87, 0xAD, 0x00, 0x76, 0x19, 0xA0, 0x00, 0x17, 0x00, 0x00, 0x80, 0x25, 0x00, 0x10, 0x70, 0x80, 0x03, 0xAE, 0x30, 0x21, 0x8C, 0xC6, 0x00, 0x78, 0x27, 0xAF, 0x00, 0xB0, 0x27, 0xB8, 0x00, 0x50, 0xAF, 0xB8, 0x00, 0x18, 0xAF, 0xAF, 0x00, 0x14, 0xAF, 0xB3, 0x00, 0x10, 0x02, 0x40, 0x20, 0x25, 0x02, 0x20, 0x28, 0x25, 0x0C, 0x10, 0x22, 0xB4, 0x8F, 0xA7, 0x00, 0xD4, 0x10, 0x40, 0x00, 0x02, 0x00, 0x40, 0x88, 0x25, 0x24, 0x14, 0x00, 0x03, 0x87, 0xA9, 0x00, 0x76, 0x26, 0x10, 0x00, 0x01, 0x00, 0x10, 0xCC, 0x00, 0x00, 0x19, 0x84, 0x03, 0x02, 0x09, 0x08, 0x2A, 0x54, 0x20, 0xFF, 0xEC, 0x00, 0x10, 0x70, 0x80, 0x24, 0x01, 0x00, 0x03, 0x16, 0x81, 0x00, 0x16, 0x26, 0x44, 0x00, 0x3C, 0x26, 0x44, 0x00, 0x3C, 0x0C, 0x0D, 0xE2, 0x00, 0x27, 0xA5, 0x00, 0xB0, 0x8F, 0xAA, 0x00, 0x50, 0xAE, 0x4A, 0x00, 0x68, 0xC7, 0xAA, 0x00, 0xB4, 0xE6, 0x4A, 0x00, 0x70, 0x8F, 0xAB, 0x00, 0x50, 0xC5, 0x6C, 0x00, 0x24, 0x0C, 0x0D, 0xEA, 0x6A, 0xC5, 0x6E, 0x00, 0x1C, 0xA6, 0x42, 0x00, 0x74, 0xA6, 0x40, 0x00, 0x2C, 0xC6, 0x2E, 0x00, 0x1C, 0x0C, 0x0D, 0xEA, 0x6A, 0xC6, 0x2C, 0x00, 0x24, 0x34, 0x01, 0x80, 0x00, 0x00, 0x41, 0x60, 0x21, 0xA6, 0x4C, 0x00, 0x2E, 0x10, 0x00, 0x00, 0x19, 0x02, 0x80, 0x10, 0x25, 0x0C, 0x0D, 0xE2, 0x00, 0x02, 0x60, 0x28, 0x25, 0x8F, 0xAD, 0x00, 0x58, 0xAE, 0x4D, 0x00, 0x68, 0xC7, 0xB0, 0x00, 0x48, 0xE6, 0x50, 0x00, 0x70, 0x10, 0x00, 0x00, 0x11, 0x02, 0x80, 0x10, 0x25, 0x26, 0x44, 0x00, 0x3C, 0x0C, 0x0D, 0xE2, 0x00, 0x02, 0x60, 0x28, 0x25, 0x8F, 0xAE, 0x00, 0x58, 0x02, 0x40, 0x20, 0x25, 0x27, 0xA5, 0x00, 0x88, 0xAE, 0x4E, 0x00, 0x68, 0xC7, 0xB2, 0x00, 0x48, 0x0C, 0x10, 0x22, 0x5E, 0xE6, 0x52, 0x00, 0x70, 0x10, 0x40, 0x00, 0x03, 0x02, 0x40, 0x20, 0x25, 0x10, 0x00, 0x00, 0x04, 0x8F, 0xBF, 0x00, 0x3C, 0x0C, 0x10, 0x22, 0x5E, 0x27, 0xA5, 0x00, 0x60, 0x8F, 0xBF, 0x00, 0x3C, 0x8F, 0xB0, 0x00, 0x28, 0x8F, 0xB1, 0x00, 0x2C, 0x8F, 0xB2, 0x00, 0x30, 0x8F, 0xB3, 0x00, 0x34, 0x8F, 0xB4, 0x00, 0x38, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0xD0
        };

        static byte[] perform_air_step = new byte[]
        {
            0x27, 0xBD, 0xFF, 0x98, 0xAF, 0xBE, 0x00, 0x40, 0xAF, 0xB7, 0x00, 0x3C, 0xAF, 0xB6, 0x00, 0x38, 0xAF, 0xB5, 0x00, 0x34, 0xAF, 0xB4, 0x00, 0x30, 0xAF, 0xB3, 0x00, 0x2C, 0xAF, 0xB2, 0x00, 0x28, 0xAF, 0xB1, 0x00, 0x24, 0xAF, 0xB0, 0x00, 0x20, 0xF7, 0xB4, 0x00, 0x18, 0x3C, 0x01, 0x40, 0x80, 0xAF, 0xBF, 0x00, 0x44, 0x44, 0x81, 0xA0, 0x00, 0x00, 0x80, 0x80, 0x25, 0x00, 0xA0, 0x98, 0x25, 0x00, 0x00, 0xF0, 0x25, 0xAC, 0x80, 0x00, 0x60, 0x00, 0x00, 0x88, 0x25, 0x24, 0x12, 0x00, 0x04, 0x27, 0xB4, 0x00, 0x5C, 0x24, 0x15, 0x00, 0x01, 0x24, 0x16, 0x00, 0x03, 0x24, 0x17, 0x00, 0x06, 0xC6, 0x04, 0x00, 0x48, 0xC6, 0x08, 0x00, 0x3C, 0x02, 0x00, 0x20, 0x25, 0x46, 0x14, 0x21, 0x83, 0x02, 0x80, 0x28, 0x25, 0x02, 0x60, 0x30, 0x25, 0x46, 0x08, 0x32, 0x80, 0xE7, 0xAA, 0x00, 0x5C, 0xC6, 0x10, 0x00, 0x4C, 0xC6, 0x04, 0x00, 0x40, 0x46, 0x14, 0x84, 0x83, 0x46, 0x04, 0x91, 0x80, 0xE7, 0xA6, 0x00, 0x60, 0xC6, 0x08, 0x00, 0x50, 0xC6, 0x10, 0x00, 0x44, 0x46, 0x14, 0x42, 0x83, 0x46, 0x10, 0x54, 0x80, 0x0C, 0x10, 0x23, 0x0F, 0xE7, 0xB2, 0x00, 0x64, 0x10, 0x40, 0x00, 0x02, 0x26, 0x31, 0x00, 0x01, 0x00, 0x40, 0xF0, 0x25, 0x50, 0x55, 0x00, 0x0A, 0xC6, 0x04, 0x00, 0x4C, 0x50, 0x56, 0x00, 0x08, 0xC6, 0x04, 0x00, 0x4C, 0x50, 0x52, 0x00, 0x06, 0xC6, 0x04, 0x00, 0x4C, 0x50, 0x57, 0x00, 0x04, 0xC6, 0x04, 0x00, 0x4C, 0x56, 0x32, 0xFF, 0xE2, 0xC6, 0x04, 0x00, 0x48, 0xC6, 0x04, 0x00, 0x4C, 0x44, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0x30, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x08, 0x00, 0x40, 0xE6, 0x08, 0x00, 0xBC, 0x0C, 0x09, 0x46, 0x2A, 0x02, 0x00, 0x20, 0x25, 0x8E, 0x0E, 0x00, 0x0C, 0x3C, 0x01, 0x10, 0x88, 0x34, 0x21, 0x08, 0x99, 0x11, 0xC1, 0x00, 0x03, 0xAE, 0x02, 0x00, 0x14, 0x0C, 0x09, 0x59, 0x87, 0x02, 0x00, 0x20, 0x25, 0x0C, 0x09, 0x5A, 0x7E, 0x02, 0x00, 0x20, 0x25, 0x8E, 0x04, 0x00, 0x88, 0x26, 0x05, 0x00, 0x3C, 0x0C, 0x0D, 0xE2, 0x00, 0x24, 0x84, 0x00, 0x20, 0x8E, 0x04, 0x00, 0x88, 0x00, 0x00, 0x28, 0x25, 0x86, 0x06, 0x00, 0x2E, 0x00, 0x00, 0x38, 0x25, 0x0C, 0x0D, 0xE2, 0x5F, 0x24, 0x84, 0x00, 0x1A, 0x8F, 0xBF, 0x00, 0x44, 0x03, 0xC0, 0x10, 0x25, 0x8F, 0xBE, 0x00, 0x40, 0xD7, 0xB4, 0x00, 0x18, 0x8F, 0xB0, 0x00, 0x20, 0x8F, 0xB1, 0x00, 0x24, 0x8F, 0xB2, 0x00, 0x28, 0x8F, 0xB3, 0x00, 0x2C, 0x8F, 0xB4, 0x00, 0x30, 0x8F, 0xB5, 0x00, 0x34, 0x8F, 0xB6, 0x00, 0x38, 0x8F, 0xB7, 0x00, 0x3C, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x68
        };

        static byte[] old_check_ledge_climb_down = new byte[]
        {
            0x27, 0xBD, 0xFF, 0xB0, 0xAF, 0xBF, 0x00, 0x14, 0xAF, 0xA4, 0x00, 0x50, 0x8F, 0xAE, 0x00, 0x50, 0x3C, 0x01, 0x41, 0x20, 0x44, 0x81, 0x30, 0x00, 0xC5, 0xC4, 0x00, 0x54, 0x46, 0x06, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xAF, 0x00, 0x50, 0xC5, 0xE8, 0x00, 0x3C, 0xE7, 0xA8, 0x00, 0x28, 0x8F, 0xB8, 0x00, 0x50, 0xC7, 0x0A, 0x00, 0x40, 0xE7, 0xAA, 0x00, 0x2C, 0x8F, 0xB9, 0x00, 0x50, 0xC7, 0x30, 0x00, 0x44
        };

        static byte[] new_check_ledge_climb_down = new byte[]
        {
            0x27, 0xBD, 0xFF, 0xB0, 0xAF, 0xBF, 0x00, 0x14, 0xAF, 0xA4, 0x00, 0x50, 0x8F, 0xAE, 0x00, 0x50, 0x3C, 0x01, 0x41, 0x20, 0x44, 0x81, 0x30, 0x00, 0xC5, 0xC4, 0x00, 0x54, 0x46, 0x06, 0x20, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x5E, 0xC4, 0x8A, 0x00, 0x48, 0xC4, 0x88, 0x00, 0x3C, 0x46, 0x0A, 0x42, 0x00, 0xE7, 0xA8, 0x00, 0x28, 0xC4, 0x8A, 0x00, 0x40, 0xE7, 0xAA, 0x00, 0x2C, 0xC4, 0x92, 0x00, 0x50, 0xC4, 0x90, 0x00, 0x44, 0x46, 0x12, 0x84, 0x00, 0xE7, 0xB0, 0x00, 0x30, 0x3C, 0x01, 0x41, 0xA0, 0x44, 0x81, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xB2, 0x00, 0x38, 0x3C, 0x01, 0xC1, 0x20, 0x44, 0x81, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xA4, 0x00, 0x34, 0x0C, 0x0E, 0x03, 0xA3, 0x27, 0xA4, 0x00, 0x28, 0x10, 0x40, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0xC7, 0xAC, 0x00, 0x28, 0xC7, 0xAE, 0x00, 0x2C, 0x8F, 0xA6, 0x00, 0x30, 0x0C, 0x0E, 0x06, 0x40, 0x27, 0xA7, 0x00, 0x24, 0xE7, 0xA0, 0x00, 0x20, 0x8F, 0xA8, 0x00, 0x24, 0x11, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0xC7, 0xA6, 0x00, 0x2C, 0xC7, 0xA8, 0x00, 0x20, 0x3C, 0x01, 0x43, 0x20, 0x44, 0x81, 0x80, 0x00, 0x46, 0x08, 0x32, 0x81, 0x46, 0x0A, 0x80, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x87, 0xA9, 0x00, 0x3E, 0x00, 0x09, 0x50, 0x80, 0x03, 0xAA, 0x58, 0x21, 0x8D, 0x6B, 0x00, 0x3C, 0xAF, 0xAB, 0x00, 0x1C, 0x8F, 0xAC, 0x00, 0x1C, 0xC5, 0x8C, 0x00, 0x24, 0x0C, 0x0D, 0xEA, 0x6A, 0xC5, 0x8E, 0x00, 0x1C, 0xA7, 0xA2, 0x00, 0x1A, 0x8F, 0xAE, 0x00, 0x50, 0x87, 0xAD, 0x00, 0x1A, 0x85, 0xCF, 0x00, 0x2E, 0x01, 0xAF, 0xC0, 0x23, 0xA7, 0xB8, 0x00, 0x18, 0x87, 0xB9, 0x00, 0x18, 0x2B, 0x21, 0xC0, 0x01, 0x14, 0x20, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x21, 0x40, 0x00, 0x10, 0x20, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xA8, 0x00, 0x1C, 0x3C, 0x01, 0x41, 0xF0, 0x44, 0x81, 0x20, 0x00, 0xC5, 0x12, 0x00, 0x1C, 0xC7, 0xA8, 0x00, 0x28, 0x8F, 0xA9, 0x00, 0x50, 0x46, 0x04, 0x91, 0x82, 0x46, 0x06, 0x42, 0x81, 0xE5, 0x2A, 0x00, 0x3C, 0x8F, 0xAA, 0x00, 0x1C, 0x3C, 0x01, 0x41, 0xF0, 0x44, 0x81, 0x90, 0x00, 0xC5, 0x50, 0x00, 0x24, 0xC7, 0xA8, 0x00, 0x30, 0x8F, 0xAB, 0x00, 0x50, 0x46, 0x12, 0x81, 0x02, 0x46, 0x04, 0x41, 0x81, 0xE5, 0x66, 0x00, 0x44, 0x8F, 0xAC, 0x00, 0x50, 0xA5, 0x80, 0x00, 0x2C, 0x87, 0xAE, 0x00, 0x1A, 0x8F, 0xAF, 0x00, 0x50, 0x34, 0x01, 0x80, 0x00, 0x01, 0xC1, 0x68, 0x21, 0xA5, 0xED, 0x00, 0x2E, 0x8F, 0xA4, 0x00, 0x50, 0x24, 0x05, 0x05, 0x4E, 0x0C, 0x09, 0x4B, 0x3D, 0x00, 0x00, 0x30, 0x25, 0x8F, 0xA4, 0x00, 0x50, 0x0C, 0x09, 0x42, 0x6E, 0x24, 0x05, 0x00, 0x1C, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xBF, 0x00, 0x14, 0x27, 0xBD, 0x00, 0x50, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
        };

        unsafe static bool CompareBytes(byte* original, byte[] compare)
        {
            for (int i = 0; i < compare.Length; i++)
                if (original[i] != compare[i])
                    return false;
            return true;
        }

        unsafe static void WriteBytes(byte* original, byte[] newBytes)
        {
            for (int i = 0; i < newBytes.Length; i++)
                original[i] = newBytes[i];
        }

        unsafe static void WriteBytesReversed(byte* original, byte[] newBytes)
        {
            for (int i = 0; i < newBytes.Length; i++)
                original[i] = newBytes[newBytes.Length - i - 1];
        }

        static void PutJAL(int targetAddress, byte[] target, int offset)
        {
            target[offset] = (byte)(0x0C);
            target[offset + 1] = (byte)(targetAddress >> 0x12);
            target[offset + 2] = (byte)(targetAddress >> 0x0A);
            target[offset + 3] = (byte)(targetAddress >> 0x02);
        }

        unsafe static void Main(string[] args)
        {
            var baseROMOffset = 0x01200000;
            var baseRAMOffset = 0x00400000;
            
            if (args.Length < 1)
            {
                Console.WriteLine("No command line arguments supplied. Please specificy a ROM to apply this patch to.");
                Console.WriteLine("\nPress any key to exit.");
                Console.ReadLine();
                return;
            }
            GCHandle handle = default(GCHandle);
            try
            {
                var anomalyBuilder = new System.Text.StringBuilder();
                var file = args[0].Trim();
                var rom = System.IO.File.ReadAllBytes(file);

                //Find free space in frauber space (0x1200000 - 0x1210000)
                int startOfFreeSpace;
                bool hasSpace = false;
                for (startOfFreeSpace = 0; startOfFreeSpace < 0xF000; startOfFreeSpace += 0x10)
                {
                    for (int k = 0; k < 0xFB0; k++)
                        if (rom[baseROMOffset + startOfFreeSpace + k] != 0x01)
                            goto notGood;
                    hasSpace = true;
                    break;
                notGood:;
                }
                if (!hasSpace)
                    throw new Exception("Not enough space available to apply the patch. Abort.");
                baseROMOffset += startOfFreeSpace;
                baseRAMOffset += startOfFreeSpace;

                //Update JALs in the new methods to point to correct location
                PutJAL(baseRAMOffset + 0xC3C, perform_air_step, 0xA4);
                PutJAL(baseRAMOffset + 0x900, perform_air_step_methods, 0xC84 - 0x900);
                PutJAL(baseRAMOffset + 0x900, perform_air_step_methods, 0xC98 - 0x900);
                PutJAL(baseRAMOffset + 0xAD0, perform_air_step_methods, 0xE9C - 0x900);
                PutJAL(baseRAMOffset + 0x978, perform_air_step_methods, 0xF6C - 0x900);
                PutJAL(baseRAMOffset + 0x978, perform_air_step_methods, 0xF84 - 0x900);

                handle = GCHandle.Alloc(rom);
                var ptr = Marshal.UnsafeAddrOfPinnedArrayElement(rom, 0);
                var toFindWallCollisionsFromList = new byte[4];
                PutJAL(baseRAMOffset, toFindWallCollisionsFromList, 0);

                var callers = new System.Collections.Generic.List<int>();

                //0xFDD18 is the expected first instance of JAL to find_wall_collisions_from_list (0xFDD68 is usually the second).
                //Some hacks have this JAL in a slightly different location (Kaze's optimized collision patch?)
                //Therefore search the vicinity for JALs to this function and replace those...
                var searchStart = 0xFDD18; //expected first instance of JAL to find_wall_collisions_from_list
                for (int i = 0; i < 0x400; i += 4)
                {
                    var here = searchStart + i;
                    if (rom[here] == 0x0C && rom[here + 1] == 0x0E && rom[here + 2] == 0x01 && rom[here + 3] == 0xA4)
                        callers.Add(here);
                }
                for (int i = 4; i < 0x400; i += 4)
                {
                    var here = searchStart - i;
                    if (rom[here] == 0x0C && rom[here + 1] == 0x0E && rom[here + 2] == 0x01 && rom[here + 3] == 0xA4)
                        callers.Add(here);
                }

                //If no callers to find_wall_collision_from_list were found, assume that the method has previously been replaced already.
                //This may, for instanced, be caused by trying to apply the patch to an already patched ROM.
                if (callers.Count == 0)
                    throw new Exception("The specified ROM already has a different find_wall_collisions_from_list method in place.\nThe tweak was likely already applied.\n");
                else
                    foreach (var caller in callers)
                    {
                        WriteBytes((byte*)IntPtr.Add(ptr, caller), toFindWallCollisionsFromList);
                        Console.WriteLine($"Wrote JAL to new find_wall_collisions_from_list subroutine at {caller.ToString("X")} (0x4 bytes)");
                        if (caller != 0xFDD18 && caller != 0xFDD68)
                            anomalyBuilder.AppendLine($"JAL to find_wall_collisions_from_list at {caller.ToString("X")} is non-standard");
                    }
                if (callers.Count != 2)
                    anomalyBuilder.AppendLine($"There were {callers.Count} calls to find_wall_collisions_from_list found instead of 2");


                bool extBoundaries = false;
                //Extended boundaries patch uses the S4 register illegally. This breaks the new collision routine.
                //The fix uses AT instead - however the illegal usage is not present in both locations in all ROMs. Cool.
                var uses_S4_illegally = new byte[] { 0x3C, 0x14, 0x40, 0x80, 0x44, 0x94, 0xA0, 0x00 };
                var uses_AT_instead = new byte[] { 0x3C, 0x01, 0x40, 0x80, 0x44, 0x81, 0xA0, 0x00 };
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0xFD428), uses_S4_illegally))
                {
                    WriteBytes((byte*)IntPtr.Add(ptr, 0xFD428), uses_AT_instead);
                    Console.WriteLine($"Fixed illegal usage of S4 register in the extended boundaries hack at 0xFD428 (0x4 bytes)");
                    extBoundaries = true;
                }
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0xFDAD0), uses_S4_illegally))
                {
                    WriteBytes((byte*)IntPtr.Add(ptr, 0xFDAD0), uses_AT_instead);
                    Console.WriteLine($"Fixed illegal usage of S4 register in the extended boundaries hack at 0xFDAD0 (0x4 bytes)");
                    extBoundaries = true;
                }

                if (extBoundaries)
                {
                    //If the extended boundaries patch has been detected, patch the find_wall_collisions_from_list function for extended boundaries in.
                    //For some reason, the camera does not like to work now, so this band-aid patch does an additional 
                    //call to the old find_wall_collisions_from_list with an empty list, because that fixes it somehow... (probably ext boundaries related again...)
                    WriteBytes((byte*)IntPtr.Add(ptr, 0xFDD88), new byte[] { 0x00, 0x00, 0x20, 0x25, 0x0C, 0x0E, 0x01, 0xA4, 0x8F, 0xA5, 0x00, 0x38 });
                    Console.WriteLine($"Applied a band-aid fix to repair camera on ext-boundaries ROMs that is needed for an unknown reason at 0xFDD88 (0xC bytes)");

                    WriteBytes((byte*)IntPtr.Add(ptr, baseROMOffset), find_wall_collisions_from_list_ext_bounds);
                    Console.WriteLine($"New find_wall_collisons_from_list function for extended boundaries written to {baseROMOffset.ToString("X")} ({find_wall_collisions_from_list_ext_bounds.Length.ToString("X")} bytes)");
                }
                else
                {
                    //If no extended boundaries patch has been detected, patch the find_wall_collisions_from_list function for regular boundaries in.
                    WriteBytes((byte*)IntPtr.Add(ptr, baseROMOffset), find_wall_collisions_from_list_regular_bounds);
                    Console.WriteLine($"New find_wall_collisons_from_list function for regular boundaries written to {baseROMOffset.ToString("X")} ({find_wall_collisions_from_list_regular_bounds.Length.ToString("X")} bytes)");
                }

                //Write the changed methods referenced by perform_air_step.
                //Since these methods are now more complex than before, they do not fit in their original location.
                //Therefore, they must be moved into frauber-space.
                WriteBytes((byte*)IntPtr.Add(ptr, baseROMOffset + 0x900), perform_air_step_methods);
                Console.WriteLine($"New perform_air_step dependencies written to {(baseROMOffset + 0x900).ToString("X")} ({perform_air_step_methods.Length.ToString("X")} bytes)");

                //Write the new perform_air_step method at its original location.
                WriteBytes((byte*)IntPtr.Add(ptr, 0x11B24), perform_air_step);
                Console.WriteLine($"New perform_air_step function written at 0x11B24 ({perform_air_step.Length.ToString("X")} bytes)");

                //check_ledge_climb_down relies on finding a wall triangle under Mario.
                //Since this tweak removes the backside of wall triangles, this will now typically fail.
                //Therefore, search for a wall triangle in front of Mario (as dictated by his velocity vector) instead.
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0x1F0FC), old_check_ledge_climb_down))
                {
                    WriteBytes((byte*)IntPtr.Add(ptr, 0x1F0FC), new_check_ledge_climb_down);
                    Console.WriteLine("Updated check_ledge_climb_down to search for walls in front of Mario rather than under (Necessary because walls don't have backsides anymore)");
                }

                //Apply a larger margin for wall triangles.
                //Normally triangles are classified as walls when the y-component of their normal is between -0.01 and 0.01.
                //This often causes near-vertical surfaces to not be classified as walls even though they were meant to be walls,
                //creating extremely steep floors and ceilings (the latter of which in turn create "invisible walls" when exposed).
                //Increasing this margin avoids many of those occurences.
                const double new_y_normal_threshold = 0.05;

                //0.01 for normal y-component to classify a surface as a wall
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0x108930), new byte[] { 0x3F, 0x84, 0x7A, 0xE1, 0x47, 0xAE, 0x14, 0x7B }))
                {
                    WriteBytesReversed((byte*)IntPtr.Add(ptr, 0x108930), BitConverter.GetBytes(new_y_normal_threshold));
                    Console.WriteLine("Patched positive wall triangle threshold at 0x108930 (0x4 Bytes)");
                }
                //-0.01 for normal y-component to classify a surface as a wall
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0x108938), new byte[] { 0xBF, 0x84, 0x7A, 0xE1, 0x47, 0xAE, 0x14, 0x7B }))
                {
                    WriteBytesReversed((byte*)IntPtr.Add(ptr, 0x108938), BitConverter.GetBytes(-new_y_normal_threshold));
                    Console.WriteLine("Patched negative wall triangle threshold at 0x108930 (0x4 Bytes)");
                }

                //Some hacks (in particular King Boos Revenge 1) read the wall threshold values from a different location.
                //I don't know why they do this, especially since those values allow for even steeper floors...
                if (CompareBytes((byte*)IntPtr.Add(ptr, 0xFFCB0), new byte[] { 0x3F, 0x1A, 0x36, 0xE2, 0xEB, 0x1C, 0x43, 0x2D, 0xBF, 0x84, 0x7A, 0xE1, 0x47, 0xAE, 0x14, 0x7B }))
                {
                    WriteBytesReversed((byte*)IntPtr.Add(ptr, 0xFFCB0), BitConverter.GetBytes(new_y_normal_threshold));
                    WriteBytesReversed((byte*)IntPtr.Add(ptr, 0xFFCB8), BitConverter.GetBytes(-new_y_normal_threshold));
                    Console.WriteLine("Patched wall triangle threshold at 0xFFCB0 (0x8 Bytes)");
                    anomalyBuilder.AppendLine("Wall triangle threshold was found at 0xFFCB0 instead of 0x108930.");
                }

                ulong crc;
                if (RecalculateCRC.N64CalcCRC(out crc, (byte*)ptr) == 0)
                {
                    RecalculateCRC.Write32(rom, 0x14, (uint)(crc >> 0x20));
                    RecalculateCRC.Write32(rom, 0x10, (uint)(crc & 0xFFFFFFFF));
                }

                System.IO.File.WriteAllBytes($"{System.IO.Path.GetFileNameWithoutExtension(file)} (better collision).z64", rom);

                Console.WriteLine("\nSuccessfully patched ROM.");

                //If any anomalies were detected, print them.
                if (anomalyBuilder.Length > 0)
                {
                    Console.WriteLine("\nWarning: There were anomalies during the patching process. The patched ROM may not work properly.");
                    Console.WriteLine(anomalyBuilder.ToString());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine();
                Console.WriteLine(ex.ToString());
                Console.WriteLine();
                Console.WriteLine("Failed to patch ROM.");
            }
            finally
            {
                if (handle != default(GCHandle))
                    handle.Free();
            }
            Console.WriteLine("\nPress any key to exit.");
            Console.ReadLine();
        }
    }
}
